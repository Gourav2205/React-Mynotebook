{"ast":null,"code":"var _jsxFileName = \"G:\\\\React Course\\\\inotebook\\\\client\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // get all  NOTEs\n  const getNote = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem()\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  };\n\n  // ADD A NOTE\n  const addNote = async (title, content, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem()\n      },\n      body: JSON.stringify({\n        title,\n        content,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n  // DELETE A NOTE\n  const deleteNote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem()\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    console.log(\"delete note with id: \" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  // EDIT A NOTE\n  const editNote = async (id, title, content, tag) => {\n    // Api Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem()\n      },\n      body: JSON.stringify({\n        title,\n        content,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    // Logic to edit in client\n    for (let index = 0; index < notes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].content = content;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","getNote","response","fetch","method","headers","localStorage","getItem","json","addNote","title","content","tag","body","JSON","stringify","note","concat","deleteNote","id","console","log","newNotes","filter","_id","editNote","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["G:/React Course/inotebook/client/src/context/notes/NoteState.js"],"sourcesContent":["import NoteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n    const host = \"http://localhost:5000\"\r\n    const notesInitial = []\r\n    const [notes, setNotes] = useState(notesInitial)\r\n\r\n    // get all  NOTEs\r\n    const getNote = async () => {\r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": localStorage.getItem()\r\n            }\r\n        });\r\n        const json = await response.json()\r\n        setNotes(json)\r\n    }\r\n\r\n    // ADD A NOTE\r\n    const addNote = async (title, content, tag) => {\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": localStorage.getItem()\r\n            },\r\n            body: JSON.stringify({ title, content, tag })\r\n        });\r\n        const note = await response.json();\r\n        setNotes(notes.concat(note))\r\n    }\r\n    // DELETE A NOTE\r\n    const deleteNote = async (id) => {\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": localStorage.getItem()\r\n            },\r\n        });\r\n        const json = await response.json();\r\n        console.log(json)\r\n        console.log(\"delete note with id: \" + id)\r\n        const newNotes = notes.filter((note) => { return note._id !== id })\r\n        setNotes(newNotes)\r\n    }\r\n    // EDIT A NOTE\r\n    const editNote = async (id, title, content, tag) => {\r\n        // Api Call\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"auth-token\": localStorage.getItem()\r\n            },\r\n            body: JSON.stringify({ title, content, tag })\r\n        });\r\n        const json = await response.json();\r\n        console.log(json)\r\n        let newNotes = JSON.parse(JSON.stringify(notes))\r\n        // Logic to edit in client\r\n        for (let index = 0; index < notes.length; index++) {\r\n            const element = newNotes[index];\r\n            if (element._id === id) {\r\n                newNotes[index].title = title;\r\n                newNotes[index].content = content;\r\n                newNotes[index].tag = tag;\r\n                break\r\n            }\r\n        }\r\n        setNotes(newNotes);\r\n    }\r\n    return (\r\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNote }}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}